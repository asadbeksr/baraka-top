generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @default(now()) @map("updated_at")
  role                   UserRole  @default(USER)
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  accounts               Account[]
  sessions               Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
  USER
}

model Station {
  id                  String   @id @default(cuid())
  landmark            String?  
  legalName           String?   @map("legal_name") 
  price               Float?   
  pressure            Float?
  columnsCount        Int?     @map("columns_count")
  gasTemperature      Float?   @map("gas_temperature")
  methaneDensity      Float?   @map("methane_density")
  cameraIP            String?  @map("live_camera_ip")
  createdAt           DateTime? @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")
  
  // New fields based on JSON data
  name                String?
  slug                String?
  phoneNumber         String?   @map("phone_number")
  region              String?
  website             String?
  address             String?
  latitude            Float?
  longitude           Float?

  // Relations
  amenities          StationToAmenity[]
  photos             Photo[] 
  primaryRelations   RelatedStation[] @relation("StationAsPrimary")
  relatedRelations   RelatedStation[] @relation("StationAsRelated")
  reviews            Review[] 
  workDates          WorkDate[]

  @@map("stations")
}

model Amenity {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  icon        String?
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  
  // Relations
  stations    StationToAmenity[]

  @@map("amenities")
}

model StationToAmenity {
  stationId String
  amenityId String
  enabled   Boolean  @default(true)
  
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@id([stationId, amenityId])
  @@map("station_to_amenities")
}

model Photo {
  id        String  @id @default(cuid())
  url       String
  stationId String  @map("station_id")
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model RelatedStation {
  id               String  @id @default(cuid())
  stationId        String
  relatedStationId String @map("related_station_id")
  station          Station @relation("StationAsPrimary", fields: [stationId], references: [id], onDelete: Cascade)
  relatedStation   Station @relation("StationAsRelated", fields: [relatedStationId], references: [id], onDelete: Cascade)

  @@unique([stationId, relatedStationId])
  @@map("related_stations")
}

model Review {
  id        String  @id @default(cuid())
  rating    Int
  comment   String?
  stationId String
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model WorkDate {
  id        String  @id @default(cuid())
  day       Int
  start     String
  end       String
  stationId String  @map("station_id")
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)

  @@map("work_dates")
}
