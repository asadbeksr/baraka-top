generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at         DateTime @default(now()) @map("created_at")
  updated_at         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  email_verified         DateTime? @map("email_verified")
  image                  String?
  created_at             DateTime  @default(now()) @map("created_at")
  updated_at             DateTime  @default(now()) @map("updated_at")
  role                   UserRole  @default(USER)
  stripe_customer_id     String?   @unique @map("stripe_customer_id")
  stripe_subscription_id String?   @unique @map("stripe_subscription_id")
  stripe_price_id        String?   @map("stripe_price_id")
  stripe_current_period_end DateTime? @map("stripe_current_period_end")

  // Telegram specific fields
  telegram_id            BigInt?   @unique @map("telegram_id")
  is_bot                 Boolean?  @map("is_bot")
  first_name             String?   @map("first_name")
  last_name              String?   @map("last_name")
  username               String?
  language_code          String?   @map("language_code")
  is_premium             Boolean?  @map("is_premium")
  added_to_attachment_menu Boolean?  @map("added_to_attachment_menu")
  allows_write_to_pm     Boolean?  @map("allows_write_to_pm")
  photo_url              String?   @map("photo_url")
  last_opened_at         DateTime? @map("last_opened_at")

  accounts               Account[]
  sessions               Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
  USER
}

model Station {
  id                  String   @id @default(cuid())
  landmark            String?  
  legal_name          String?   @map("legal_name") 
  price               Float?   
  pressure            Float?
  columns_count       Int?     @map("columns_count")
  gas_temperature     Float?   @map("gas_temperature")
  methane_density     Float?   @map("methane_density")
  live_camera_ip      String?  @map("live_camera_ip")
  created_at          DateTime? @default(now()) @map("created_at")
  updated_at          DateTime? @updatedAt @map("updated_at")
  
  // New fields based on JSON data
  name                String?
  slug                String?
  phone_number        String?   @map("phone_number")
  region              String?
  website             String?
  address             String?
  latitude            Float?
  longitude           Float?

  // Relations
  amenities          StationToAmenity[]
  photos             Photo[] 
  primary_relations   RelatedStation[] @relation("StationAsPrimary")
  related_relations   RelatedStation[] @relation("StationAsRelated")
  reviews            Review[] 
  work_dates         WorkDate[]

  @@map("stations")
}

model Amenity {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  icon        String?
  description String?
  created_at   DateTime @default(now()) @map("created_at")
  updated_at   DateTime? @updatedAt @map("updated_at")
  
  // Relations
  stations    StationToAmenity[]

  @@map("amenities")
}

model StationToAmenity {
  station_id String
  amenity_id String
  enabled   Boolean  @default(true)
  
  station   Station @relation(fields: [station_id], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenity_id], references: [id], onDelete: Cascade)

  @@id([station_id, amenity_id])
  @@map("station_to_amenities")
}

model Photo {
  id        String  @id @default(cuid())
  url       String
  station_id String  @map("station_id")
  station   Station @relation(fields: [station_id], references: [id], onDelete: Cascade)

  @@map("photos")
}

model RelatedStation {
  id               String  @id @default(cuid())
  station_id       String
  related_station_id String @map("related_station_id")
  station          Station @relation("StationAsPrimary", fields: [station_id], references: [id], onDelete: Cascade)
  related_station   Station @relation("StationAsRelated", fields: [related_station_id], references: [id], onDelete: Cascade)

  @@unique([station_id, related_station_id])
  @@map("related_stations")
}

model Review {
  id        String  @id @default(cuid())
  rating    Int
  comment   String?
  station_id String
  station   Station @relation(fields: [station_id], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model WorkDate {
  id        String  @id @default(cuid())
  day       Int
  start     String
  end       String
  station_id String  @map("station_id")
  station   Station @relation(fields: [station_id], references: [id], onDelete: Cascade)

  @@map("work_dates")
}
